#include <WiFi.h>
#include <HTTPClient.h>
#include "esp_timer.h"
#include <Preferences.h>
#include <ArduinoWebsockets.h>
#include <ArduinoJson.h>

using namespace websockets;
StaticJsonDocument<200> doc;  // Sesuaikan ukuran dokumen berdasarkan kebutuhan
WebsocketsClient client_pusher;
unsigned long lastPollTime = 0;
const unsigned long pollInterval = 50;  // تأخير 50 ميلي ثانية بين كل poll

const char* websockets_server_host = "ws-eu.pusher.com";  //Enter server adress
const uint16_t websockets_server_port = 80;               // Enter server port
const char* channel = "channel104575277";
volatile char room[10] = "";
volatile char newResponse[10] = "";
const int inputPins[] = { 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23 };
const char* pinLabels[] = { "SW1", "SW2", "SW3", "SW4", "SW5", "IR1", "IR2", "IR3", "fire1", "fire2", "fire3" };
const int outputPins[] = { 2, 4, 5, 25 };
const char* ssid = "Y1";
const char* password = "yousef7753811122";
volatile bool is_on = false;
volatile bool is_cont = false;
volatile bool SWITCH_senser = true;
volatile bool IR_senser = true;
volatile bool fire_senser = true;
volatile bool sound_alart = true;
volatile bool pumm_alart = true;
volatile bool start = true;
volatile int count = 0;
int batteryValue = 50;
int electricalValue = 1;
bool isHeating = false;
unsigned long startTime = 0;


Preferences preferences;
void handleWebSocketMessage(WebsocketsMessage message) {
  Serial.print("📩 استلام: ");
  Serial.println(message.data());

  StaticJsonDocument<512> outerDoc;
  if (deserializeJson(outerDoc, message.data())) {
    Serial.println("❌ خطأ في التحليل الخارجي للـ JSON");
    return;
  }
  String innerJson = outerDoc["data"] | "";
  StaticJsonDocument<256> innerDoc;
  if (deserializeJson(innerDoc, innerJson)) {
    Serial.println("❌ خطأ في التحليل الداخلي للـ JSON");
    return;
  }
  String msg = innerDoc["message"] | "";
  if (msg == "alart") {
    digitalWrite(2, HIGH);  // شغّل الـ pin
    startTime = millis();   // احفظ وقت البدء
    isHeating = true;
  } else if (msg == "bag_alart") {
    Serial.println("🎒 تم استلام تنبيه: bag_alart");
  } else if (msg.length() == 6 && msg.toInt() > 0) {
    msg.toCharArray((char*)newResponse, sizeof(newResponse));
    is_on = msg[0] == '1';
    SWITCH_senser = msg[1] == '1';
    IR_senser = msg[2] == '1';
    fire_senser = msg[3] == '1';
    sound_alart = msg[4] == '1';
    pumm_alart = msg[5] == '1';
    Serial.println(msg);
  } else {
    Serial.println("⚠️ رسالة غير معروفة أو تنسيق غير صحيح");
  }
}


void connectToPusher() {
  Serial.println("Connecting to Pusher...");
  bool connected = client_pusher.connect(websockets_server_host, websockets_server_port, "/app/70d401ffdd541b0a4358?client=arduino&version=7.0.3&protocol=5");
  if (connected) {
    Serial.println("Connected to Pusher!");
    doc.clear();  // تأكد من تفريغ المستند قبل استخدامه
    doc["event"] = "pusher:subscribe";
    JsonObject data = doc.createNestedObject("data");
    data["channel"] = channel;
    String jsonString;
    serializeJson(doc, jsonString);
    client_pusher.send(jsonString);
  } else {
    Serial.println("Failed to connect to Pusher.");
  }
  client_pusher.onMessage(handleWebSocketMessage);
}

bool processResponse(const String& response) {
  if (response.length() < 6) {
    Serial.println("Error: Response length is too short!");
    strcpy((char*)newResponse, (char*)room);
    return false;
  }

  // التأكد من أن كل الأحرف هي 0 أو 1
  for (int i = 0; i < 6; i++) {
    if (response[i] != '0' && response[i] != '1') {
      Serial.println("الرد يحتوي على أحرف غير صحيحة");
      return false;
    }
  }
  // نسخ الرد إلى newResponse وتحويله إلى متغيرات
  response.toCharArray((char*)newResponse, sizeof(newResponse));
  is_on = response[0] == '1';
  SWITCH_senser = response[1] == '1';
  IR_senser = response[2] == '1';
  fire_senser = response[3] == '1';
  sound_alart = response[4] == '1';
  pumm_alart = response[5] == '1';
  Serial.println("////////////////////////////////////////");
  return true;
}


void onStartOrPusher() {
  if (WiFi.status() != WL_CONNECTED) {
    strcpy((char*)newResponse, (char*)room);
    Serial.println("WiFi not connected!");
    return;
  }
  HTTPClient http;
  String url = "http://yousef7784678711.pagekite.me/api/decat";
  http.begin(url);
  http.addHeader("Content-Type", "application/json");

  String jsonPayload = "{\"id\":\"1\",\"battery\":\"" + String(batteryValue) + "\",\"electrical\":\"" + String(electricalValue) + "\"}";
  int httpResponseCode = http.POST(jsonPayload);

  if (httpResponseCode > 0) {
    Serial.print("HTTP Response Code: ");
    Serial.println(httpResponseCode);

    String response = http.getString();
    Serial.println("Response:");
    Serial.println(response);

    if (!processResponse(response)) {
      strcpy((char*)newResponse, (char*)room);
      Serial.println("eror in 78");
    }


  } else {
    strcpy((char*)newResponse, (char*)room);
    Serial.print("Error on HTTP request: ");
    Serial.println(http.errorToString(httpResponseCode).c_str());
  }

  http.end();
}

void IRAM_ATTR onTimer(void* arg) {
  if (is_cont) {
    count++;
  }
  onStartOrPusher();
  Serial.println("Timer triggered every 20 seconds!");
}

void loadRoomFromMemory() {
  preferences.begin("my-app", true);
  String temp = preferences.getString("room_data", "");
  preferences.end();

  temp.toCharArray((char*)room, sizeof(room));  // نسخ String إلى char[]

  if (strlen((const char*)room) >= 6) {
    is_on = room[0] == '1';
    SWITCH_senser = room[1] == '1';
    IR_senser = room[2] == '1';
    fire_senser = room[3] == '1';
    sound_alart = room[4] == '1';
    pumm_alart = room[5] == '1';
  }
}


void setup() {
  Serial.begin(115200);

  for (int i = 0; i < sizeof(inputPins) / sizeof(inputPins[0]); i++) {
    pinMode(inputPins[i], INPUT_PULLUP);
  }

  for (int i = 0; i < sizeof(outputPins) / sizeof(outputPins[0]); i++) {
    pinMode(outputPins[i], OUTPUT);
    digitalWrite(outputPins[i], LOW);
  }

  WiFi.begin(ssid, password);
  Serial.print("Connecting to Wi-Fi");
  int contacted = 0;
  while (WiFi.status() != WL_CONNECTED || contacted > 6) {
    contacted++;
    delay(500);

    Serial.print(".");
  }
  connectToPusher();
  Serial.println("\nConnected to Wi-Fi!");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  esp_timer_create_args_t timerArgs = {
    .callback = &onTimer,
    .arg = NULL,
    .dispatch_method = ESP_TIMER_TASK,
    .name = "MyTimer"
  };
  loadRoomFromMemory();
  esp_timer_handle_t timerHandle;
  esp_timer_create(&timerArgs, &timerHandle);
  esp_timer_start_periodic(timerHandle, 20000000);
}

void send(int i) {
  Serial.print(pinLabels[i]);
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    String url = "http://yousef7784678711.pagekite.me/api/dataSenser";
    http.begin(url);
    http.addHeader("Content-Type", "application/json");
    String jsonPayload = "{\"id\":\"1\",\"name\":\"" + String(pinLabels[i]) + "\"}";
    int httpResponseCode = http.POST(jsonPayload);
    if (httpResponseCode > 0) {
      Serial.print("HTTP Response Code: ");
      Serial.println(httpResponseCode);
      String response = http.getString();
      Serial.println("Response:");
      Serial.println(response);
      if (!processResponse(response)) {
        strcpy((char*)newResponse, (char*)room);
      }
    } else {
      strcpy((char*)newResponse, (char*)room);
      Serial.print("Error on HTTP request: ");
      Serial.println(http.errorToString(httpResponseCode).c_str());
    }
    http.end();
  } else {
    strcpy((char*)newResponse, (char*)room);
    Serial.println("WiFi not connected!");
  }
  delay(100);
}
void updateRoomFromResponse() {
  if (strlen((char*)newResponse) >= 6 && strcmp((char*)newResponse, (char*)room) != 0) {
    // تم التغيير، قم بالحفظ
    preferences.begin("my-app", false);
    preferences.putString("room_data", String((char*)newResponse));  // تحويل إلى String
    preferences.end();

    // نسخ newResponse إلى room
    strcpy((char*)room, (char*)newResponse);

    // فك التشفير إلى المتغيرات
    is_on = room[0] == '1';
    SWITCH_senser = room[1] == '1';
    IR_senser = room[2] == '1';
    fire_senser = room[3] == '1';
    sound_alart = room[4] == '1';
    pumm_alart = room[5] == '1';

    Serial.println(String("✅ Response updated and stored: ") + (char*)room);
  } else {
  }
}

void loop() {
  if (start) {
  }
  /////////////
  updateRoomFromResponse();



  if (millis() - lastPollTime >= pollInterval) {
    lastPollTime = millis();
    if (client_pusher.available()) {
      client_pusher.poll();
    }
  }
  if (isHeating && millis() - startTime >= 5000) {
    digitalWrite(2, LOW);  // أطفئ الـ pin بعد 5 ثوانٍ
    isHeating = false;     // أوقف المؤقت
  }

  if (is_cont && count >= 1) {
    digitalWrite(outputPins[0], 0);
    digitalWrite(outputPins[1], 0);
    digitalWrite(outputPins[2], 0);
    digitalWrite(outputPins[3], 0);

    count = 0;
    is_cont = false;
  }

  for (int i = 0; i < sizeof(inputPins) / sizeof(inputPins[0]); i++) {
    if (digitalRead(inputPins[i]) == LOW) {
      if (is_on) {
        is_cont = true;
        if ((i == 0 || i == 1 || i == 2 || i == 3) && SWITCH_senser) {
          digitalWrite(outputPins[0], 1);
          if (sound_alart)
            digitalWrite(outputPins[1], 1);
          if (pumm_alart)
            digitalWrite(outputPins[2], 1);
          digitalWrite(outputPins[3], 1);

          send(i);
        }
        if ((i == 4 || i == 5 || i == 6) && IR_senser) {
          digitalWrite(outputPins[0], 1);
          if (sound_alart)
            digitalWrite(outputPins[1], 1);
          if (pumm_alart)
            digitalWrite(outputPins[2], 1);
          digitalWrite(outputPins[3], 1);
          send(i);
        }
        if ((i == 7 || i == 8 || i == 9) && fire_senser) {
          digitalWrite(outputPins[0], 1);
          if (sound_alart)
            digitalWrite(outputPins[1], 1);
          if (pumm_alart)
            digitalWrite(outputPins[2], 1);
          digitalWrite(outputPins[3], 1);
          send(i);
        }
      }
    }
  }
}